{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/App.module.css","components/ContactList/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contactsActions.js","redux/contacts/contactsOperations.js","components/ContactForm/ContactForm.js","redux/contacts/contactsSelectors.js","components/ContactList/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","components/Notification/Notification.js","redux/contacts/contactsReducers.js","redux/store.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","removeContactRequest","removeContactSuccess","removeContactError","changeFilter","axios","defaults","baseURL","addContact","name","number","dispatch","contactsActions","post","then","data","catch","error","fetchContacts","get","removeContact","id","delete","ContactForm","state","handleSubmit","e","preventDefault","props","onAddContact","setState","handleChange","target","value","onSubmit","this","className","s","form","label","input","type","onChange","placeholder","btn","Component","mapDispatchToProps","contactsOperations","connect","getFilter","contacts","filter","getItems","items","getVisibleContacts","createSelector","contact","toLowerCase","includes","getContactsById","_","contactId","find","item","ownProps","contactsSelectors","onRemove","key","sect__btn","onClick","TransitionGroup","component","list","map","CSSTransition","timeout","classNames","unmountOnExit","onChangeFilter","App","onFetchContacts","box","in","appear","title","defaultModules","set","PNotifyMobile","createReducer","action","payload","trim","text","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d41966b7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__37jUF\",\"label\":\"ContactForm_label__3CrYk\",\"input\":\"ContactForm_input__2AqyP\",\"btn\":\"ContactForm_btn__3YnmP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"App_box__EcVSv\",\"title\":\"App_title__22-Pe\",\"appear\":\"App_appear__OaW9i\",\"appearActive\":\"App_appearActive__34Ghg\",\"filter-enter\":\"App_filter-enter__2w6Q_\",\"filter-enterActive\":\"App_filter-enterActive__2fGAW\",\"filter-exit\":\"App_filter-exit__2kCTU\",\"filter-exitActive\":\"App_filter-exitActive__U0GMz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__1wo3e\",\"sect__btn\":\"ContactListItem_sect__btn__QPRHD\",\"btn\":\"ContactListItem_btn__32yc6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1R-yS\",\"enter\":\"ContactList_enter__2rG0k\",\"enter-active\":\"ContactList_enter-active__TVBpf\",\"exit\":\"ContactList_exit__2OFk_\",\"exit-active\":\"ContactList_exit-active__3V_bz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1o60g\",\"label\":\"Filter_label__3eZo-\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContactRequest = createAction('contacts/addRequest');\r\nconst addContactSuccess = createAction('contacts/addSuccess');\r\nconst addContactError = createAction('contacts/addError');\r\n\r\nconst fetchContactsRequest = createAction('contacts/fetchRequest');\r\nconst fetchContactsSuccess = createAction('contacts/fetchSuccess');\r\nconst fetchContactsError = createAction('contacts/fetchError');\r\n\r\nconst removeContactRequest = createAction('contacts/removeRequest');\r\nconst removeContactSuccess = createAction('contacts/removeSuccess');\r\nconst removeContactError = createAction('contacts/removeError');\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nexport default {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n  changeFilter,\r\n};\r\n","import axios from 'axios';\r\n\r\nimport contactsActions from './contactsActions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:5555';\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n  dispatch(contactsActions.addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', { name, number })\r\n    .then(({ data }) => dispatch(contactsActions.addContactSuccess(data)))\r\n    .catch(error => dispatch(contactsActions.addContactError(error)));\r\n};\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(contactsActions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(contactsActions.fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(contactsActions.fetchContactsError(error)));\r\n};\r\n\r\nconst removeContact = id => dispatch => {\r\n  dispatch(contactsActions.removeContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(contactsActions.removeContactSuccess(id)))\r\n    .catch(error => dispatch(contactsActions.removeContactError(error)));\r\n};\r\n\r\nexport default {\r\n  addContact,\r\n  fetchContacts,\r\n  removeContact,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\n\r\nimport s from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    this.props.onAddContact(name, number);\r\n\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={s.form}>\r\n        <label className={s.label}>\r\n          Name:\r\n          <input\r\n            className={s.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            placeholder=\"Enter name\"\r\n          />\r\n        </label>\r\n        <label className={s.label}>\r\n          Number:\r\n          <input\r\n            className={s.input}\r\n            type=\"text\"\r\n            name=\"number\"\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n            placeholder=\"Enter number\"\r\n          ></input>\r\n        </label>\r\n\r\n        <button type=\"submit\" className={s.btn}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.number,\r\n  onAddContact: PropTypes.func.isRequired,\r\n};\r\n\r\n// const mapStateToProps = (state) => state;\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: contactsOperations.addContact,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\nconst getItems = state => state.contacts.items;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getItems, getFilter],\r\n  (items, filter) => {\r\n    return items.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\nconst getContactsById = createSelector(\r\n  [(_, contactId) => contactId, getItems],\r\n  (contactId, items) => {\r\n    return items.find(item => item.id === contactId);\r\n  },\r\n);\r\n\r\nexport default {\r\n  getFilter,\r\n  getItems,\r\n  getVisibleContacts,\r\n  getContactsById,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport contactsSelectors from '../../../redux/contacts/contactsSelectors';\r\nimport contactsOperations from '../../../redux/contacts/contactsOperations';\r\n\r\nimport s from './ContactListItem.module.css';\r\n\r\nconst ContactListItem = ({ name, id, number, onRemove }) => {\r\n  return (\r\n    <li key={id} className={s.item}>\r\n      <p>{name}:</p>\r\n      <p>{number}</p>\r\n      <section className={s.sect__btn}>\r\n        <button className={s.btn} type=\"button\" onClick={onRemove}>\r\n          Delete\r\n        </button>\r\n      </section>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const contact = contactsSelectors.getContactsById(state, ownProps.id);\r\n  return {\r\n    ...contact,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onRemove: () => dispatch(contactsOperations.removeContact(ownProps.id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\nimport ContactListItem from './ContactListItem/ContactListItem';\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts }) => (\r\n  <TransitionGroup component=\"ul\" className={s.list}>\r\n    {contacts.map(({ id }) => (\r\n      <CSSTransition key={id} timeout={1000} classNames={s} unmountOnExit>\r\n        <ContactListItem key={id} id={id} />\r\n      </CSSTransition>\r\n    ))}\r\n  </TransitionGroup>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      id: PropTypes.number.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getVisibleContacts(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChangeFilter }) => {\r\n  return (\r\n    <div>\r\n      <label className={s.label}>\r\n        Find contacts by name:\r\n        <input\r\n          className={s.filter}\r\n          placeholder=\"Enter name\"\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={e => onChangeFilter(e.target.value)}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: contactsActions.changeFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport ContactForm from './ContactForm/ContactForm';\r\nimport ContactList from './ContactList/ContactList';\r\nimport Filter from './Filter/Filter';\r\nimport contactsOperations from '../redux/contacts/contactsOperations';\r\n\r\nimport s from './App.module.css';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={s.box}>\r\n        <CSSTransition\r\n          in={true}\r\n          appear\r\n          timeout={1000}\r\n          classNames={s}\r\n          unmountOnExit\r\n        >\r\n          <h1 className={s.title}>Phonebook</h1>\r\n        </CSSTransition>\r\n\r\n        <ContactForm />\r\n\r\n        <CSSTransition\r\n          in={true}\r\n          timeout={250}\r\n          classNames={s.filter}\r\n          unmountOnExit\r\n        >\r\n          <Filter />\r\n        </CSSTransition>\r\n\r\n        <ContactList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onFetchContacts: contactsOperations.fetchContacts,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import { error, defaultModules } from \"@pnotify/core/dist/PNotify.js\";\r\nimport * as PNotifyMobile from \"@pnotify/mobile/dist/PNotifyMobile.js\";\r\nimport \"@pnotify/core/dist/PNotify.css\";\r\nimport \"@pnotify/core/dist/BrightTheme.css\";\r\n\r\ndefaultModules.set(PNotifyMobile, {});\r\n\r\nexport default function errorMessage(name) {\r\n  error({\r\n    text: `${name} is already in contacts!`,\r\n  });\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport contactsActions from './contactsActions';\r\n\r\nimport errorMessage from '../../components/Notification/Notification';\r\n\r\nconst addContact = (state, action) => {\r\n  const names = state.map(item => item.name.toLowerCase());\r\n  const isNotUniqueContact = names.includes(\r\n    action.payload.name.toLowerCase().trim(),\r\n  );\r\n\r\n  if (isNotUniqueContact) {\r\n    errorMessage(action.payload.name);\r\n    return state;\r\n  } else {\r\n    return [...state, action.payload];\r\n  }\r\n};\r\n\r\nconst removeContact = (state, action) => {\r\n  return state.filter(({ id }) => id !== action.payload);\r\n};\r\n\r\nconst items = createReducer([], {\r\n  [contactsActions.fetchContactsSuccess]: (_, action) => action.payload,\r\n  [contactsActions.addContactSuccess]: addContact,\r\n  [contactsActions.removeContactSuccess]: removeContact,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [contactsActions.changeFilter]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactsReducer from \"./contacts/contactsReducers\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./components/App\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}